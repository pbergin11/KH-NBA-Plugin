openapi: 3.0.2
info:
  title: NBA Basketball Knowledge API
  description: This API will get current and historical stats for NBA players and games.
  version: 'v1'
servers:
  - url: https://octopus-app-4yrlx.ondigitalocean.app/
paths:
  /team_ID_by_Name:
    get:
      operationId: getTeamID
      summary: Retrieves teams ID by team name for the current season.
      responses:
        "200":
          description: OK
  /games:
    get:
      operationId: getGames
      summary: Retrieves all the games for a specific date in the NBA and their associated scores and results. To get stats about a specific player in a game, use the getPlayersStatsByDate operationID.
      parameters:
      - in: query
        name: day
        schema:
            type: string
        description: Filter by day. Provide the day required to find the game information, must be formatted as YYYY-MM-DD.
      - in: query
        name: message
        schema:
            type: string
        description: Required. Pass the users message to the API, this is used to vectorize the message and use sematic search to retrieve information.
      responses:
        "200":
          description: OK  
  /year_standings:
    get:
      operationId: getStandings
      summary: Retrieves the standings in the NBA relative to a specific season. Ensure a year is determined, otherwise the API will return an error.
      parameters:
      - in: query
        name: year
        schema:
            type: integer
        description: Required. Filter by seasons. Seasons are represented by the year they began. For example, 2018 represents season 2018-2019.
      - in: query
        name: message
        schema:
            type: string
        description: Required. Pass the users message to the API, this is used to vectorize the message and use sematic search to retrieve information.
      responses:
        "200":
          description: OK  
  /allstar_roster:
    get:
      operationId: getAllstarRosters
      summary: Retrieves the all-star game rosters in the NBA for a specific year.
      parameters:
      - in: query
        name: year
        schema:
            type: integer
        description: Required. Filter by seasons. Seasons are represented by the year they began. For example, 2018 represents season 2018-2019.
      - in: query
        name: message
        schema:
            type: string
        description: Required. Pass the users message to the API, this is used to vectorize the message and use sematic search to retrieve information.
      responses:
        "200":
          description: OK
  /current_roster_list:
    get:
      operationId: getCurrentRosterList
      summary: Retrieves the current roster and basic information for all players on a specific team. This is specific to only one team per request.
      parameters:
      - in: query
        name: team_abv
        schema:
            type: string
        description: Required. Return the team abreviation for the specific NBA team. For example the brooklyn nets are BKN, the Toronto Raptors are TOR.
      - in: query
        name: message
        schema:
            type: string
        description: Required. Pass the users message to the API, this is used to vectorize the message and use sematic search to retrieve information.
      responses:
        "200":
          description: OK
  /player_stats_by_date:
    get:
      operationId: getPlayersStatsByDate
      summary: Use this tool if the user asks for a players specific stats on a specific date. It gets stats of a specific player in a game. If no player is returned, assume the player did not play in a game that day. Use the getGames operationID for specific games as a whole.
      parameters:
      - in: query
        name: date
        schema:
            type: string
        description: Required. Filter by day. Provide the day required to find the game information, must be formatted as YYYY-MM-DD.
      - in: query
        name: player_name
        schema:
            type: string
        description: Required. The full name of the player, no short forms or nick names, only full names. For example Steph Curry must be Stephen Curry.
      - in: query
        name: player_id
        schema:
            type: string
        description: Required. The player ID about the specific player in the request information.
      - in: query
        name: message
        schema:
            type: string
        description: Required. Pass the users message to the API, this is used to vectorize the message and use sematic search to retrieve information.
      responses:
        "200":
          description: OK
components:
  schemas:
    Document:
      required:
        - text
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        metadata:
          $ref: "#/components/schemas/DocumentMetadata"
    DocumentChunkMetadata:
      type: object
      properties:
        source:
          $ref: "#/components/schemas/Source"
        source_id:
          type: string
        url:
          type: string
        created_at:
          type: string
        author:
          type: string
        document_id:
          type: string
    DocumentChunkWithScore:
      required:
        - document_id
        - text
        - score
      type: object
      properties:
        id:
          type: string
        document_id:
          type: string
        text:
          type: string
        metadata:
          $ref: "#/components/schemas/DocumentChunkMetadata"
        embedding:
          type: array
          items:
            type: number
        score:
          description: cosine similarity between the query and the document snippet. Higher scores are more similar.
          type: number
    DocumentMetadata:
      type: object
      properties:
        source:
          $ref: "#/components/schemas/Source"
        source_id:
          type: string
        url:
          type: string
        created_at:
          type: string
        author:
          type: string
    DocumentMetadataFilter:
      type: object
      properties:
        document_id:
          type: string
        source:
          $ref: "#/components/schemas/Source"
        source_id:
          type: string
        author:
          type: string
        start_date:
          type: string
        end_date:
          type: string
    HTTPValidationError:
      type: object
      properties:
        detail:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
    Query:
      required:
        - query
      type: object
      properties:
        query:
          type: string
        filter:
          $ref: "#/components/schemas/DocumentMetadataFilter"
        top_k:
          description: number of results to show
          type: integer
          default: 5
    QueryRequest:
      required:
        - queries
      type: object
      properties:
        queries:
          type: array
          description: "This is an array of search query objects, each containing a natural language query string ('query') and an optional metadata filter ('filter'). Filters can help refine search results based on criteria such as document title or time period, these are particularly useful when a user asks for more information about a particular record, for example, the user may ask for more information after provided with information from a podcast with the title 'Our AI future with ChatGPT', in that case the filter field can be used to return more information by using {'title': 'Our AI future with ChatGPT'}. You can send multiple queries to compare information from different sources or break down complex questions into sub-questions."
          items:
            $ref: "#/components/schemas/Query"
    QueryResponse:
      required:
        - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/QueryResult"
    QueryResult:
      required:
        - query
        - results
      type: object
      properties:
        query:
          type: string
        results:
          type: array
          items:
            $ref: "#/components/schemas/DocumentChunkWithScore"
    Source:
      enum:
        - email
        - file
        - chat
      type: string
      description: An enumeration.
    ValidationError:
      required:
        - loc
        - msg
        - type
      type: object
      properties:
        loc:
          type: array
          items:
            anyOf:
              - type: string
              - type: integer
        msg:
          type: string
        type:
          type: string
  securitySchemes:
    HTTPBearer:
      type: http
      scheme: bearer